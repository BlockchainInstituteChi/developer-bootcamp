export interface TransactionRequest {
    from?: string;
    to?: string;
    data?: string;
    value?: string | number;
    gasPrice?: string | number;
    gas?: string | number;
    fn?: string;
    function?: string;
}
export declare enum AbiEntryType {
    Function = "function",
    Event = "event",
    Constructor = "constructor",
    Fallback = "fallback"
}
declare enum StateMutability {
    Pure = "pure",
    View = "view",
    NonPayable = "nonpayable",
    Payable = "payable"
}
export interface AbiParam {
    name: string;
    type: string;
    components?: AbiParam[];
}
interface AbiEntry {
    type: AbiEntryType;
    name?: string;
    inputs?: AbiParam[];
}
export interface AbiFunction extends AbiEntry {
    outputs?: AbiParam[];
    stateMutability?: StateMutability;
    payable?: true;
    constant?: true;
}
interface AbiEventParam extends AbiParam {
    indexed?: boolean;
}
export interface AbiEvent extends AbiEntry {
    inputs?: AbiEventParam[];
    anonymous?: boolean;
}
export declare type ContractABI = Array<AbiEvent | AbiFunction>;
export interface Factory {
    at(address: string): ContractInterface;
}
export interface ContractInterface {
    abi: ContractABI;
    address: string;
}
export declare const ContractFactory: (encoder?: (tx: any, params?: any) => any) => (contractABI: (AbiFunction | AbiEvent)[]) => Factory;
export {};
//# sourceMappingURL=Contract.d.ts.map