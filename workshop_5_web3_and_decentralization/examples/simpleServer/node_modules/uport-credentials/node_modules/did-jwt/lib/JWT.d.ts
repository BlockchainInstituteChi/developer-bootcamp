import { DIDDocument, PublicKey } from 'did-resolver';
export interface EcdsaSignature {
    r: string;
    s: string;
    recoveryParam?: number;
}
export declare type Signer = (data: string) => Promise<EcdsaSignature | string>;
export declare type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>;
interface JWTOptions {
    issuer: string;
    signer: Signer;
    alg?: string;
    expiresIn?: number;
}
interface JWTVerifyOptions {
    auth?: boolean;
    audience?: string;
    callbackUrl?: string;
}
interface DIDAuthenticator {
    authenticators: PublicKey[];
    issuer: string;
    doc: DIDDocument;
}
interface JWTHeader {
    typ: 'JWT';
    alg: string;
}
interface JWTPayload {
    iss?: string;
    sub?: string;
    aud?: string;
    iat?: number;
    type?: string;
    exp?: number;
    rexp?: number;
}
interface JWTDecoded {
    header: JWTHeader;
    payload: JWTPayload;
    signature: string;
    data: string;
}
interface Verified {
    payload: any;
    doc: DIDDocument;
    issuer: string;
    signer: object;
    jwt: string;
}
export declare const IAT_SKEW: number;
export declare function normalizeDID(mnidOrDid: string): string;
/**
 *  Decodes a JWT and returns an object representing the payload
 *
 *  @example
 *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')
 *
 *  @param    {String}            jwt                a JSON Web Token to verify
 *  @return   {Object}                               a JS object representing the decoded JWT
 */
export declare function decodeJWT(jwt: string): JWTDecoded;
/**
 *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.
 *
 *  @example
 *  const signer = SimpleSigner(process.env.PRIVATE_KEY)
 *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {
 *      ...
 *  })
 *
 *  @param    {Object}            payload            payload object
 *  @param    {Object}            [options]           an unsigned credential object
 *  @param    {String}            options.issuer      The DID of the issuer (signer) of JWT
 *  @param    {String}            options.alg         The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519], Defaults to: ES256K
 *  @param    {SimpleSigner}      options.signer      a signer, reference our SimpleSigner.js
 *  @return   {Promise<Object, Error>}               a promise which resolves with a signed JSON Web Token or rejects with an error
 */
export declare function createJWT(payload: object, { issuer, signer, alg, expiresIn }: JWTOptions): Promise<string>;
/**
 *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,
 *  and the did doc of the issuer of the JWT.
 *
 *  @example
 *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {
 *      const did = obj.did // DID of signer
 *      const payload = obj.payload
 *      const doc = obj.doc // DID Document of signer
 *      const jwt = obj.jwt
 *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT
 *      ...
 *  })
 *
 *  @param    {String}            jwt                a JSON Web Token to verify
 *  @param    {Object}            [options]           an unsigned credential object
 *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)
 *  @param    {String}            options.audience    DID of the recipient of the JWT
 *  @param    {String}            options.callbackUrl callback url in JWT
 *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error
 */
export declare function verifyJWT(jwt: string, options?: JWTVerifyOptions): Promise<Verified>;
/**
 * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID
 *
 *  @example
 *  resolveAuthenticator('ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {
 *      const payload = obj.payload
 *      const profile = obj.profile
 *      const jwt = obj.jwt
 *      ...
 *  })
 *
 *  @param    {String}            alg                a JWT algorithm
 *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup
 *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document
 *  @return   {Promise<Object, Error>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error
 */
export declare function resolveAuthenticator(alg: string, mnidOrDid: string, auth?: boolean): Promise<DIDAuthenticator>;
export {};
//# sourceMappingURL=JWT.d.ts.map