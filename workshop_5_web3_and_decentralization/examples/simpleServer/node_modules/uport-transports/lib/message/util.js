'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 *  Add params as url fragment (hash params)
 *
 *  @param    {String}       url           a url
 *  @param    {Object}       [params={}]   params object of valid params to add as url fragment
 *  @return   {String}                     a url with valid params added as url fragment (hash params)
 */
var paramsToUrlFragment = function paramsToUrlFragment(url) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var supported = ['data', 'id'];
  return supported.filter(function (val) {
    return params[val];
  }).reduce(function () {
    var uri = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : url;
    var val = arguments[1];
    return '' + uri + (/#/.test(uri) ? '&' : '#') + val + '=' + encodeURIComponent(params[val]);
  }, url).toString();
};

// NOTE  still suport data/bytecode param???
/**
 *  Add params as url query params
 *
 *  @param    {String}       url           a url
 *  @param    {Object}       [params={}]   params object of valid params to add as url query params
 *  @return   {String}                     a url with valid params added as url query framents
 */
var paramsToQueryString = function paramsToQueryString(url) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var supported = ['value', 'function', 'bytecode', 'label', 'callback_url', 'redirect_url', 'client_id', 'network_id', 'gas', 'gasPrice', 'callback_type'];
  return supported.filter(function (val) {
    return params[val];
  }).reduce(function () {
    var uri = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : url;
    var val = arguments[1];

    var split = uri.split('#');
    return '' + split[0] + (/uport.me\/req\/([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_\-\+\/=]*)?\?/.test(split[0]) ? '&' : '?') + val + '=' + encodeURIComponent(params[val]) + (split[1] ? '#' + split[1] : '');
  }, url).toString();
};

/**
 *  Returns params object of query params in given url
 *
 *  @param    {String}       url           a url
 *  @return   {Object}                     object of param key and values
 */
var getUrlQueryParams = function getUrlQueryParams(url) {
  var params = url.match(/[^&?]*?=[^&?]*/g);
  if (!params) return {};
  return params.map(function (param) {
    return param.split('=');
  }).reduce(function (params, param) {
    params[param[0]] = param[1];
    return params;
  }, {});
};

/**
 * Returns request token (JWT) from a request URI
 *
 *  @param    {String}       url           a url
 *  @return   {String}                     a JWT string
 */
var getURLJWT = function getURLJWT(url) {
  return url.replace(/https:\/\/id.uport.me\/req\//, '').replace(/(\#|\?)(.*)/, '');
};

/**
 * Given string, returns boolean if string is JWT
 *
 *  @param    {String}       jwt           A JWT string
 *  @return   {Boolean}
 */
var isJWT = function isJWT(jwt) {
  return (/^([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_\-\+\/=]*)/.test(jwt)
  );
};

/**
 * Remove both deeplink and universal link prefixes from a given message
 * @param {String} message 
 */
var trimURI = function trimURI(message) {
  return message.replace(/(https:\/\/)?id\.uport\.me\/req\/?/, '').replace('me.uport:req/', '');
};

/**
 * Wrap a JWT in a request URI using the Universal Link scheme based at id.uport.me
 * @param    {String}       message       A request message (JWT), or if given URI will just return
 * @return   {String}                    A valid request URI, including the given request token
 */
var messageToUniversalURI = function messageToUniversalURI(message) {
  return 'https://id.uport.me/req/' + trimURI(message);
};

/**
 * Wrap a JWT in a request URI using the Deeplink scheme, using me.uport: 
 * @param {String} message  A request message (JWT)
 * @param {String} uri      The associated deeplink uri for the given message
 */
var messageToDeeplinkURI = function messageToDeeplinkURI(message) {
  return 'me.uport:req/' + trimURI(message);
};

/**
 * Wrap a JWT in a request URI according to the specified scheme
 * @param {String} message  The message to be uri encoded
 * @param {String} type     The URI method of the above two, either 'universal' or 'deeplink'
 */
var messageToURI = function messageToURI(message) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'universal';
  return type === 'universal' ? messageToUniversalURI(message) : messageToDeeplinkURI(message);
};

exports.paramsToUrlFragment = paramsToUrlFragment;
exports.paramsToQueryString = paramsToQueryString;
exports.getUrlQueryParams = getUrlQueryParams;
exports.getURLJWT = getURLJWT;
exports.isJWT = isJWT;
exports.messageToURI = messageToURI;
exports.messageToUniversalURI = messageToUniversalURI;
exports.messageToDeeplinkURI = messageToDeeplinkURI;