'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.networkToNetworkSet = exports.networkSet = exports.network = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _defaults = require('./defaults.js');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var network = function network() {
  var net = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _defaults.NETWORK;

  if ((typeof net === 'undefined' ? 'undefined' : _typeof(net)) === 'object') {
    ;['id', 'rpcUrl'].forEach(function (key) {
      if (!net.hasOwnProperty(key)) throw new Error('Malformed network config object, object must have \'' + key + '\' key specified.');
    });
    return net;
  } else if (typeof net === 'string') {
    if (!_defaults.networks[net]) throw new Error('Network configuration not available for \'' + net + '\'');
    return _defaults.networks[net];
  }

  throw new Error('Network configuration object or network string required');
};

var networkSet = function networkSet(nets) {
  Object.keys(nets).forEach(function (key) {
    var net = nets[key];
    if ((typeof net === 'undefined' ? 'undefined' : _typeof(net)) === 'object') {
      if (!net.rpcUrl) throw new Error('Malformed network config object, object must have \'rpcUrl\' key specified.');
    } else {
      throw new Error('Network configuration object required');
    }
  });
  return nets;
};

var networkToNetworkSet = function networkToNetworkSet(net) {
  return _defineProperty({}, net.id, { registry: net.registry, rpcUrl: net.rpcUrl });
};

exports.network = network;
exports.networkSet = networkSet;
exports.networkToNetworkSet = networkToNetworkSet;